{
  "name": "json-editor",
  "description": "JSON Editor for ChiÏ‡",
  "version": "0.0.2",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodule/data.git"
  },
  "dependencies": {
    "json-editor": "git://github.com/psichi/json-editor",
    "select2": "^3.5.1-browserify-fix"
  },
  "nodes": [
    {
      "ports": {
        "input": {
          "element": {
            "title": "Element",
            "description": "Element",
            "type": "HTMLElement"
          },
          "in": {
            "title": "Json",
            "type": "object",
            "description": "JSON Object",
            "async": true
          },
          "schema": {
            "title": "Schema",
            "type": "object",
            "description": "A valid JSON Schema to use for the editor. Version 3 and Version 4 of the draft specification are supported.",
            "async": true
          },
          "enable": {
            "title": "Enable",
            "description": "Enable",
            "async": true
          },
          "disable": {
            "title": "Disable",
            "description": "Disable",
            "async": true
          },
          "options": {
            "title": "Options",
            "type": "object",
            "properties": {
              "ajax": {
                "title": "Ajax",
                "description": "If true, JSON Editor will load external URLs in $ref via ajax.",
                "default": false
              },
              "disable_array_add": {
                "title": "Disable array add",
                "description": "If true, remove all `add row` buttons from arrays.",
                "default": false
              },
              "disable_array_delete": {
                "title": "Disable array delete",
                "description": "If true, remove all `delete row` buttons from arrays.",
                "default": false
              },
              "disable_array_reorder": {
                "title": "Disable array reorder",
                "description": "If true, remove all `move up` and `move down` buttons from arrays.",
                "default": false
              },
              "disable_collapse": {
                "title": "Disable collapse",
                "description": "If true, remove all collapse buttons from objects and arrays.",
                "default": false
              },
              "disable_edit_json": {
                "title": "Disable edit json",
                "description": "If true, remove all Edit JSON buttons from objects.",
                "default": false
              },
              "disable_properties": {
                "title": "Disable properties",
                "description": "If true, remove all Edit Properties buttons from objects.",
                "default": false
              },
              "form_name_root": {
                "title": "Form name root",
                "description": "The first part of the `name` attribute of form inputs in the editor. An full example name is `root[person][name]` where `root` is the form_name_root.",
                "default": "root"
              },
              "iconlib": {
                "title": "Iconlib",
                "description": "The icon library to use for the editor. See the CSS Integration section below for more info.",
                "default": null
              },
              "no_additional_properties": {
                "title": "No additional properties",
                "description": "If true, objects can only contain properties defined with the properties keyword.",
                "default": false
              },
              "refs": {
                "title": "Refs",
                "description": "An object containing schema definitions for URLs. Allows you to pre-define external schemas.",
                "default": {}
              },
              "required_by_default": {
                "title": "Required by default",
                "description": "If true, all schemas that don't explicitly set the required property will be required.",
                "default": false
              },
              "show_errors": {
                "title": "Show errors",
                "description": "When to show validation errors in the UI. Valid values are interaction, change, always, and never.",
                "default": "interaction"
              },
              "startval": {
                "title": "Start value",
                "description": " Seed the editor with an initial value. This should be valid against the editor's schema.",
                "default": null
              },
              "template": {
                "title": "Template",
                "description": "The JS template engine to use. See the Templates and Variables section below for more info.",
                "default": "default"
              },
              "theme": {
                "title": "Theme",
                "description": "The CSS theme to use. See the CSS Integration section below for more info.",
                "default": "html"
              }
            }
          }
        },
        "output": {
          "out": {
            "title": "out",
            "type": "string"
          },
          "editor": {
            "title": "Editor",
            "type": "JSONEditor"
          }
        }
      },
      "dependencies": {
        "npm": {
          "json-editor": "latest"
        }
      },
      "phrases": {
        "active": "Creating JSON Editor"
      },
      "async": true,
      "description": "JSON Editor",
      "title": "JSON Editor",
      "ns": "json-editor",
      "name": "editor",
      "fn": "state.jsonEditor = null;\nstate.changeHandler = function() {\n    output({out: state.jsonEditor.getValue()});\n};\n\non.input.in = function() {\n  state.in = data;\n  if (state.jsonEditor) {\n    state.jsonEditor.setValue(state.in);\n  }\n};\n\non.input.schema = function() {\n  state.schema = input.options.schema = input.schema;\n  if (state.jsonEditor) {\n    state.jsonEditor.off('change', state.changeHandler);\n    state.jsonEditor.destroy();\n  }\n  state.jsonEditor = new json_editor(input.element, input.options);\n  // problem if state.in is not about this schema..\n  if (state.in) {\n    state.jsonEditor.setValue(state.in);\n  }\n  state.jsonEditor.on('change', state.changeHandler);\n  output({editor: state.jsonEditor});\n};\n\non.input.enable = function() {\n  if (state.jsonEditor) {\n    state.jsonEditor.enable();\n  }\n};\n\non.input.disable = function() {\n  if (state.jsonEditor) {\n    state.jsonEditor.disable();\n  }\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "Json",
            "type": "object",
            "description": "JSON Object",
            "async": true
          },
          "editor": {
            "title": "Editor",
            "type": "function",
            "description": "JSONEditor instance"
          }
        },
        "output": {
          "out": {
            "title": "Output",
            "type": "string"
          },
          "errors": {
            "title": "Errors",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "title": "Path",
                  "description": "a dot separated path into the JSON object (e.g. `root.path.to.field`)",
                  "type": "string"
                },
                "property": {
                  "title": "Property",
                  "description": "schema keyword that triggered the validation error (e.g. `minLength`)",
                  "type": "string"
                },
                "message": {
                  "title": "Message",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "phrases": {
        "active": "Validating form"
      },
      "async": true,
      "description": "JSON Editor Validate",
      "title": "JSON Editor Validate",
      "ns": "json-editor",
      "name": "validate",
      "fn": "on.input.in = function() {\n  var errors = input.editor.validate(data);\n  if(errors.length) {\n    output({errors: errors});\n  } else {\n    output({out: data});\n  }\n};\n"
    }
  ],
  "twigs": []
}